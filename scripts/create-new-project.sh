#!/usr/bin/env bash

set -euo pipefail
trap 'echo "‚ùå Error on line $LINENO. Aborting." >&2' ERR

# -------- Configuration --------
TEMPLATE_DIR=".templates"
GEN_READMES_SCRIPT="./gen-readmes.py"
REPO_URL="https://github.com/victor-ikeme/awesome-score-spec-examples.git"
TOP_LEVEL_MAKEFILE="./Makefile"
VENV_DIR=".venv"
VENV_PY="$VENV_DIR/bin/python"
YQ_CMD=$(command -v yq || true)

# -------- Input --------
if [ "$#" -ne 1 ]; then
  echo "‚ùå Usage: $0 <new-project-folder-name>"
  exit 1
fi

PROJECT_NAME="$1"
TARGET_DIR="./${PROJECT_NAME}"

# -------- Safety Checks --------
if [ -d "$TARGET_DIR" ]; then
  echo "‚ùå Directory $TARGET_DIR already exists. Aborting."
  exit 1
fi

if [ -z "$YQ_CMD" ]; then
  echo "‚ùå 'yq' is not installed or not in PATH. Please install it first."
  exit 1
fi

# -------- Step 1: Create New Folder --------
echo "üìÅ Creating new project directory: $PROJECT_NAME"
mkdir -p "$TARGET_DIR"

# -------- Step 2: Copy Template Files --------
echo "üìã Copying template files into $TARGET_DIR"
cp -r "$TEMPLATE_DIR/.github" "$TARGET_DIR"
cp -r "$TEMPLATE_DIR/scripts" "$TARGET_DIR"
cp -r "$TEMPLATE_DIR/score" "$TARGET_DIR"

cp "$TEMPLATE_DIR/.gitignore" "$TARGET_DIR/.gitignore"
cp "$TEMPLATE_DIR/Makefile" "$TARGET_DIR/Makefile"
cp "$TEMPLATE_DIR/project.meta.yml" "$TARGET_DIR/project.meta.yml"

# -------- Step 3: Update project.meta.yml Fields --------
echo "‚úèÔ∏è  Updating project.meta.yml for $PROJECT_NAME"
$YQ_CMD eval -i ".workload_name = \"$PROJECT_NAME\"" "$TARGET_DIR/project.meta.yml"
$YQ_CMD eval -i ".description = \"${PROJECT_NAME^} workload using Score.dev and platform engineering tools.\"" "$TARGET_DIR/project.meta.yml"
$YQ_CMD eval -i ".tags = [\"autogenerated\", \"$PROJECT_NAME\"]" "$TARGET_DIR/project.meta.yml"
$YQ_CMD eval -i ".image = \"$PROJECT_NAME:test\"" "$TARGET_DIR/project.meta.yml"
$YQ_CMD eval -i ".build_context = \"$PROJECT_NAME\"" "$TARGET_DIR/project.meta.yml"

# -------- Step 4: Ensure Python venv and jinja2 --------
if [ ! -x "$VENV_PY" ]; then
  echo "üêç Creating local Python venv at $VENV_DIR"
  python3 -m venv "$VENV_DIR"
fi

source "$VENV_DIR/bin/activate"

if ! pip show jinja2 &>/dev/null; then
  echo "üì¶ Installing jinja2 into virtual environment"
  pip install --quiet jinja2
fi

# -------- Step 5: Generate README --------
echo "üìÑ Generating README using gen-readmes"
make -f "$TOP_LEVEL_MAKEFILE" gen-readmes || "$VENV_PY" "$GEN_READMES_SCRIPT"

# -------- Step 6: Git Remote Safety --------
echo "üîç Verifying Git remote origin..."
REMOTE_URL=$(git remote get-url origin)

if [[ "$REMOTE_URL" != "$REPO_URL" ]]; then
  echo "‚ùå Git remote does not match expected origin:"
  echo "Expected: $REPO_URL"
  echo "Found:    $REMOTE_URL"
  exit 1
fi

# -------- Step 7: Git Commit + Push --------
echo "üì¶ Staging $PROJECT_NAME"
git add "$PROJECT_NAME"

echo "‚úÖ Committing new workload"
git commit -m "feat($PROJECT_NAME): initialize workload with boilerplate and README"

echo "üöÄ Pushing to origin main"
git push origin main

echo "üéâ Project '$PROJECT_NAME' created and pushed successfully!"
