# React, Express, and MongoDB (Microservices) Demo

This project demonstrates a modern MERN-like stack using Score to define the architecture as three distinct microservices: a React frontend, an Express.js backend, and a MongoDB database.

## Architecture

This project models the security segmentation of the original `docker-compose.yml` by using explicit service dependencies, effectively creating private networks between the tiers.

*   **`mongo-db-service`**: A standalone, stateful workload for the database. It exposes its port internally but is not accessible from the public-facing service.
*   **`express-backend-service`**: The stateless API layer. It is the only service that can access the database, as it declares a `service` dependency on `mongo-db-service`. It exposes its own internal API port for the frontend.
*   **`react-frontend-service`**: The public-facing UI. It can only access the backend, as it declares a `service` dependency on `express-backend-service`.

## Key Score Concepts

*   **Multi-Workload Architecture**: This example perfectly illustrates a microservices design by separating the database, backend, and frontend into three independent `score.yaml` files.
*   **Chained Service Dependencies**: Shows how dependencies can be chained: the `frontend` depends on the `backend`, which in turn depends on the `database`. Score's `service` resource makes this dependency graph explicit and manageable.
*   **Health Probes (`readinessProbe`)**: The `mongo-db-service` includes a `readinessProbe` with an `exec` command that uses `mongosh` to ping the database. This ensures the backend will wait until MongoDB is fully initialized and ready before attempting to connect.
*   **Volume Mounts for Development**: The `frontend` and `backend` workloads define volumes for mounting source code and caching `node_modules`, enabling a live-reloading development workflow.

## How to Run

1.  **Build the Docker Images:**
    ```bash
    docker build -t react-express-demo-frontend:latest ./frontend
    docker build -t react-express-demo-backend:latest ./backend
    ```

2.  **Generate the Compose File:**
    Generate a single `docker-compose.yml` from all three Score files.
    ```bash
    score-compose generate *.yaml
    ```

3.  **Launch the Application:**
    ```bash
    docker compose up
    ```

4.  **Access the Application:**
    Open your web browser and navigate to **`http://localhost:3000`**. The React application will load and make API calls to the Express backend, which will query the MongoDB database.