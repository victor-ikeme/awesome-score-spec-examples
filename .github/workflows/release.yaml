---
name: release
permissions:
  contents: read
  id-token: write
  packages: write
on:
  push:
    tags:
      - 'v*-*'
  workflow_dispatch:
    inputs:
      dir:
        description: 'Directory under examples/ to build (e.g., aspnet-mssql-example)'
        required: true
jobs:
  detect-dockerfiles:
    runs-on: ubuntu-24.04
    outputs:
      dockerfiles: ${{ steps.set-dockerfiles.outputs.dockerfiles }}
      dir: ${{ steps.set-dir.outputs.dir }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set directory
        id: set-dir
        run: |
          if [ -n "${{ github.event.inputs.dir }}" ]; then
            DIR="${{ github.event.inputs.dir }}"
          elif [ "${{ github.event_name }}" = "push" ]; then
            DIR=$(echo "${{ github.ref_name }}" | sed 's/^v[0-9.]*-//')
          else
            DIR="default"
          fi
          if [ ! -d "examples/$DIR" ]; then
            echo "Error: Directory examples/$DIR does not exist"
            exit 1
          fi
          echo "dir=$DIR" >> $GITHUB_OUTPUT
      - name: Debug directory contents
        run: |
          echo "Listing examples/${{ steps.set-dir.outputs.dir }}/apps"
          ls -la examples/${{ steps.set-dir.outputs.dir }}/apps || echo "Apps dir not found"
      - name: Find Dockerfiles in apps/
        id: set-dockerfiles
        run: |
          DOCKERFILES=$(find examples/${{ steps.set-dir.outputs.dir }}/apps -type f -name "Dockerfile" | \
            sed 's|examples/${{ steps.set-dir.outputs.dir }}/apps/||' | sort -u || true)
          if [ -z "$DOCKERFILES" ]; then
            echo "No Dockerfiles found in examples/${{ steps.set-dir.outputs.dir }}/apps/"
            exit 1
          fi
          DOCKERFILES_JSON=$(echo "$DOCKERFILES" | jq -R -s -c \
            'split("\n") | map(select(. != ""))')
          echo "dockerfiles=$DOCKERFILES_JSON" >> $GITHUB_OUTPUT
          echo "Dockerfiles: $DOCKERFILES_JSON"

  build-push:
    needs: detect-dockerfiles
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.detect-dockerfiles.outputs.dockerfiles) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login \
            ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and push container image
        uses: docker/build-push-action@v6
        with:
          context: examples/${{ needs.detect-dockerfiles.outputs.dir }}/apps/${{ matrix.dockerfile }}
          file: examples/${{ needs.detect-dockerfiles.outputs.dir }}/apps/${{ matrix.dockerfile }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/awesome-score-spec-examples/${{ matrix.dockerfile }}:latest
